#!/usr/bin/env python3

import os
import sys
import shutil
import subprocess
from subprocess import run
from os.path import join

ARGS_FILE = 'args'

'''
  ABySS input (in, lib, pe, mp, se,...), `k`, and `kc` are required params, either via `args` file or via cli (using the `param=arg` syntax).

  Optional params: base_assembly, lineage_dataset, ref, quast_args
'''

args = {
  'abyss_bin' : '/projects/btl_scratch/vnikolic/installs/abyss-2.3.1/bin',
  'name' : 'assembly',
  'H' : 4,
  'v' : '-vv',
  'j' : 48,
  'targets': 'scaffolds stats',
}

def link_assembly(base_assembly, derived_assembly, assembly_name):
  global ARGS_FILE

  dbg_fa = assembly_name + '-1.fa'
  dbg_dot = assembly_name + '-1.dot'
  base_args	  = join(base_assembly,    ARGS_FILE)
  base_dbg_fa     = join(base_assembly,    dbg_fa)
  base_dbg_dot    = join(base_assembly,    dbg_dot)
  derived_args    = join(derived_assembly, ARGS_FILE)
  derived_dbg_fa  = join(derived_assembly, dbg_fa)
  derived_dbg_dot = join(derived_assembly, dbg_dot)

  assert not os.path.exists(derived_args    )
  assert not os.path.exists(derived_dbg_fa  )
  assert not os.path.exists(derived_dbg_dot )

  shutil.copyfile(base_args,    derived_args   )
  os.symlink     (base_dbg_fa,  derived_dbg_fa )
  os.symlink     (base_dbg_dot, derived_dbg_dot)

cli_args = {}
for value in sys.argv[1:]:
  tokens = value.split('=')
  assert len(tokens) == 2
  cli_args[tokens[0]] = tokens[1]

file_args = {}
if os.path.exists(ARGS_FILE):
  with open(ARGS_FILE, 'r') as f:
    for line in f:
      line = line.strip()
      if line == '': continue
      tokens = line.split('=')
      if tokens[0][0] == '#': continue
      if len(tokens) == 1:
        tokens.append(None)
      file_args[tokens[0]] = tokens[1]

for param in file_args.keys():
  arg = file_args[param]
  args[param] = arg

for param in cli_args.keys():
  arg = cli_args[param]
  args[param] = arg

assert('in' in args or
       'lib' in args or
       'pe' in args or
       'mp' in args or
       'se' in args)
assert 'k' in args
assert 'kc' in args
assert 'name' in args

removed_quotes = {}
for param in args.keys():
  arg = args[param]
  if arg != None and type(arg) == str:
    if len(arg) >= 2 and arg[0] == '\"' and arg[-1] == '\"': arg = arg[1:-1]
    if len(arg) >= 2 and arg[0] == '\'' and arg[-1] == '\'': arg = arg[1:-1]
  removed_quotes[param] = arg
args = removed_quotes

with open(ARGS_FILE, 'w') as f:
  for param in args.keys():
    arg = args[param]
    if arg == None:
      f.write(f"{param}\n")
    else:
      f.write(f"{param}={arg}\n")

if 'base_assembly' in args and args['base_assembly'] != None: link_assembly(args['base_assembly'], '.', args['name'])

old_env = {}
for param in args.keys():
  arg = args[param]
  if arg != None:
    if str(param) in os.environ:
      old_env[str(param)] = os.environ[str(param)]
    else:
      old_env[str(param)] = None
    os.environ[str(param)] = str(arg)

old_env['PATH'] = os.environ['PATH']
os.environ['PATH'] = args['abyss_bin'] + ':' + os.environ['PATH']

if 'time' in os.environ: old_env['time'] = os.environ['time']
os.environ['time'] = 'true'

run([ 'export' ], shell=True)

run([ '/usr/bin/time', '-pv', 'abyss-pe' ] + args['targets'].split())

for param in old_env.keys():
  arg = old_env[param]
  if arg == None:
    del os.environ[param]
  else:
    os.environ[param] = arg

for file in os.listdir('.'):
  if (file != ARGS_FILE and
     not file.startswith('abyss-run') and
     not file.startswith('quast') and
     not file.startswith('busco') and
     not file.endswith('.time') and
     not file.endswith('.tsv') and
     not file.startswith(f'{args["name"]}-stats') and
     not file.endswith('-1.fa') and
     not file.endswith('-1.dot') and
     not file.endswith('-8.fa') and
     not file.endswith('-scaffolds.fa')):
    if os.path.isdir(file):
      shutil.rmtree(file, ignore_errors=True)
    else:
      os.remove(file)

if os.path.exists(f'{args["name"]}-scaffolds.fa'):
  run([ 'quast-analysis',
    '--space-efficient',
    '--no-icarus',
    f'{args["name"]}-scaffolds.fa',
  ] + ([] if ('ref' not in args or args['ref'] == None or args['ref'] == '') else [ '-r', args['ref'] ])
    + ([] if ('j' not in args or args['j'] == None or args['j'] == '') else [ '--threads', str(args['j']) ])
    + ([] if ('est_ref_size' not in args or args['est_ref_size'] == None or args['est_ref_size'] == '') else [ '--est-ref-size', str(args['est_ref_size']) ])
    + ([] if ('quast_args' not in args or args['quast_args'] == None) else args['quast_args'].split()))

  if 'lineage_dataset' in args and args['lineage_dataset'] != None:
    run([ 'busco-analysis',
      '--mode', 'genome',
      '--lineage_dataset', args['lineage_dataset'],
      '--space-efficient',
      '--in', f'{args["name"]}-scaffolds.fa',
    ] + ([] if ('busco_args' not in args or args['busco_args'] == None) else args['busco_args'].split()))
